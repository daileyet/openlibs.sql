{"name":"Openlibs.sql","tagline":"The lib of java database ORM simple implementation","body":"# openlibs.sql\r\nThe lib of java database ORM simple implementation\r\n\r\n\r\n---\r\n\r\n#### **Session基本用法**\r\n```java\r\n// get session instance by its factory\r\nSession session = SessionFactory.getSession();\r\n```\r\n```java\r\n// fetch a entity by its key\r\nMessage message = session.load(Message.class, \"1000\");\r\n//TODO\r\nsession.close();// close session\r\n```\r\n```java\r\n// save a entity to table\r\nMessage message = new Message();\r\nmessage.setLocale(Locale.CHINA.toString());\r\nmessage.setContent(\"HELLO\");\r\nmessage.setMessageId(\"2000\");\r\nsession.save(message);\r\nsession.close();\r\n```\r\n\r\n#### **配置文件和类使用**\r\n\r\n - 配置文件名称: dbconfig.properties\r\n - 配置文件类: Configurator\r\n - 配置文件工厂类: ConfiguratorFactory\r\n\r\n##### **数据库属性文件**\r\n\r\n格式如下:\r\n```\r\n#driver name\r\nDRIVER=com.mysql.jdbc.Driver\r\n#database url\r\nURL=jdbc:mysql://localhost:3306/opendb\r\n#database user\r\nUSERNAME=root\r\n#database pass\r\nUSERPWD=123456\r\n#databse dailect : MYSQL,ORACLE,SQLSERVER\r\nDIALECT=MYSQL\r\n```\r\n##### **配置类用法**\r\n\r\nConfigurator的属性一一对应配置文件dbconfig.properties里的键\r\n所以可以新建一个配置类实例，替代配置文件:\r\n``` java\r\nConfigurator conf = new Configurator();\r\nconf.setDriver(\"xxx\");\r\nconf.setUrl(\"xxx\");\r\nconf.setUserName(\"xxx\");\r\nconf.setUserPwd(\"xxx\");\r\n// option, default value is false\r\nconf.setUsePool(true);\r\n// option, default value is Dialect.MYSQL\r\nconf.setDialect(Dialect.ORACLE);\r\n```\r\nConfiguratorFactory类负责创建Configurator的实例\r\n```java\r\n// 方法1: 获得默认的配置类实例,将从默认配置文件dbconfig.properties中读取配置并实例化\r\nConfigurator fileConf = ConfiguratorFactory.getDefaultInstance();\r\n// 方法2: 获得新的配置类实例,将复制已有的配置实例\r\nConfigurator codeConf = ConfiguratorFactory.getInstance(conf);\r\n// 方法3: 重新设置ConfiguratorFactory的默认配置实例,指向已有的配置类实例\r\nConfiguratorFactory.setConfigurator(conf);\r\nConfigurator overrideConf = ConfiguratorFactory.getDefaultInstance();\r\n// 方法4: 读取外部文件实例化配置,配置文件名称可以自由命名\r\nFile file = new File(\"C:\\path\\filename.properties\");\r\nConfigurator externalConf = ConfiguratorFactory.getInstance(file);\r\n```\r\n\r\n#### **Session高级用法**\r\n##### **实体类定义**\r\n目前支持两种类型的实体类: 继承自Entity类,带有JPA注解的POJO类\r\n\r\nopenthinks.libs.sql.entity.Entity实例简单对应数据库中的表的一条记录,因此要求该实体类定义时注意以下事项:\r\n\r\n 1. 该实体类中的字段或属性名需要与对应表列名一样\r\n 2. 该实体类中定义的第一个字段作为对应表的主键\r\n 3. 该实体类的名称需与表名相同(仅在调用Session的高级API)\r\n\r\n例子:\r\n```\r\n//table structure\r\ncreate table message(\r\n    message_id varchar(100),\r\n    message_local varchar(100),\r\n    message_content varchar(1000)\r\n);\r\n```\r\n```java\r\npublic class Message extends Entity {\r\n\tprivate String message_id;\r\n\tprivate String message_locale;\r\n\tprivate String message_content;\r\n\tpublic String getContent() {\r\n\t\treturn message_content;\r\n\t}\r\n\tpublic String getLocale() {\r\n\t\treturn message_locale;\r\n\t}\r\n\tpublic String getId() {\r\n\t\treturn message_id;\r\n\t}\r\n\tpublic void setId(String messageId) {\r\n\t\tthis.message_id = messageId;\r\n\t}\r\n\tpublic void setLocale(String locale) {\r\n\t\tthis.message_locale = locale;\r\n\t}\r\n\tpublic void setContent(String content) {\r\n\t\tthis.message_content = content;\r\n\t}\r\n}\r\n```\r\n\r\nJPA注解的POJO类没有额外的限制\r\n```java\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\n@Entity\r\n@Table(name = \"message\")\r\npublic class MessageJPA {\r\n\t@Id\r\n\t@Column(name = \"message_id\")\r\n\tprivate String messageId;\r\n\t@Column(name = \"message_locale\")\r\n\tprivate String locale;\r\n\t@Column(name = \"message_content\")\r\n\tprivate String content;\r\n\t/*\r\n\t*getter/setter method\r\n\t*/\r\n}\r\n```\r\n\r\n##### **增删改**\r\n在Session的DAO API中分为两大类，一类是无需编写SQL(High level);另一类是需要自行构造SQL(Low level).\r\n\r\n```java\r\n//<T> void openthinks.libs.sql.dhibernate.Session.save(T object)\r\n// High level\r\nSession session = SessionFactory.getSession();\r\nMessageJPA messageJPA = new MessageJPA();\r\nmessageJPA.setLocale(Locale.US.toString());\r\nmessageJPA.setContent(\"HELLO\");\r\nmessageJPA.setMessageId(\"2000\");\r\nsession.save(messageJPA);\r\nMessage messageEntity = new Message();\r\nmessageEntity.setLocale(Locale.CHINA.toString());\r\nmessageEntity.setContent(\"你好\");\r\nmessageEntity.setId(\"3000\");\r\nsession.save(messageEntity);\r\n\r\n//int openthinks.libs.sql.dhibernate.Session.add(String sql, String[] params)\r\n// Low level\r\nString saveSQL = \"INSERT INTO message(message_id,message_locale,message_content) values(?,?,?)\";\r\nString[] params = {\"4000\",\"en_US\",\"Hello again\"};\r\nint affectRow = session.add(saveSQL,params);\r\nsession.close();\r\n```\r\n\r\n```java\r\n//<T> void openthinks.libs.sql.dhibernate.Session.update(T object)\r\nSession session = SessionFactory.getSession();\r\nMessageJPA message = new MessageJPA();\r\nmessage.setLocale(Locale.CHINA.toString());\r\nmessage.setContent(\"中国你好\");\r\nmessage.setMessageId(\"2000\");\r\nsession.update(message);\r\n\r\n//int openthinks.libs.sql.dhibernate.Session.update(String sql, String[] params)\r\nString updateSQL = \"update message set message_content = ? where message_id =? and message_locale=?\";\r\nString[] params = {\"您好\",\"zh_CN\",\"2000\"};\r\nsession.update();\r\nsession.close();\r\n```\r\n\r\n```java\r\n//<T> void openthinks.libs.sql.dhibernate.Session.delete(T object)\r\nMessageJPA messageJPA = new MessageJPA();\r\nmessageJPA.setLocale(Locale.US.toString());\r\nmessageJPA.setContent(\"HELLO\");\r\nmessageJPA.setMessageId(\"2000\");\r\nSession session = SessionFactory.getSession();\r\nsession.delete(messageJPA);\r\n\r\n//int openthinks.libs.sql.dhibernate.Session.delete(String sql, String[] params)\r\nString deleteSQL = \"delete message where message_id =? and message_locale=?\";\r\nString[] params = {\"zh_CN\",\"2000\"};\r\nsession.delete(deleteSQL,params);\r\nsession.close();\r\n```\r\n##### **条件查询**\r\n对于简单根据单一主键获取记录或获取所有表中记录,推荐使用High level API:\r\n```\r\n// 根据id值获取clz类型的实体对象\r\n<T> T openthinks.libs.sql.dhibernate.Session.load(Class<T> clz, Serializable id)\r\n// 获取所有相应实体类的集合列表\r\n<T> List<T> openthinks.libs.sql.dhibernate.Session.list(Class<T> clz)\r\n```\r\n而对于一些复杂的查询，可以使用接下来的方式\r\n###### **直接SQL语句查询**\r\n```java\r\nSession session = SessionFactory.getSession();\r\nString querySQL = \"SELECT * FROM message WHERE message_id = ? and message_locale= ? \";\r\nMessgaeJPA messageJPA = session.get(MessageJPA.class, querySQL,new String[]{\"2000\",\"zh_CN\"});\r\n//Messgae message = session.get(Message.class, querySQL,new String[]{\"2000\",\"zh_CN\"});\r\nList<MessageJPA> list = session.list(MessageJPA.class, \"SELECT * FROM message\",new String[]{});\r\n//List<Message> list = session.list(Message.class, \"SELECT * FROM message\",new String[]{});\r\n// 不指定实体类型时,将使用 openthinks.libs.sql.data.Row\r\nList<Row> rows = session.list(\"SELECT * FROM message\",new String[]{});\r\nsession.close();\r\n```\r\n###### **简单条件类查询**\r\n简单条件类: openthinks.libs.sql.lang.Condition是非常底层的,也属于Low level.\r\nCondition对象可以如下创建:\r\n```\r\nSession session = SessionFactory.getSession();\r\nsession.createCondition(); // same as Condition.build()\r\n```\r\n```\r\n// where 1=1\r\nCondition condition1 = Condition.build(); \r\n// SELECT * FROM message where 1=1\r\nCondition condition2 = Condition.build(\"SELECT * FROM message\");\r\n// SELECT * FROM message where 1=1\r\nCondition condition3 = Condition.build(MessageJPA.class);\r\n```\r\n如何使用:(暂支持 绝对匹配 *=*,模糊匹配 *like*,开始于 *>*,结束于 *<*)\r\n参考以下 test case:\r\n```java\r\npublic class ConditionTest {\r\n\tprivate static MessageJPA message = new MessageJPA();\r\n\tprivate static MessageJPA message2 = new MessageJPA();\r\n\t@BeforeClass\r\n\tpublic static void setUp() {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tmessage.setMessageId(\"CONDITION_1\");\r\n\t\tmessage.setLocale(Locale.US.toString());\r\n\t\tmessage.setContent(\"Condition class regular test\");\r\n\t\tsession.save(message);\r\n\r\n\t\tmessage2.setMessageId(\"CONDITION_2\");\r\n\t\tmessage2.setLocale(Locale.US.toString());\r\n\t\tmessage2.setContent(\"Condition class other test\");\r\n\t\tsession.save(message2);\r\n\t\tsession.close();\r\n\t}\r\n\t@Test\r\n\tpublic void regularTest() {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tCondition condition = session.createCondition();\r\n\t\tcondition.setSqlPart(\"SELECT * FROM message\");\r\n\t\t// 等效于 Condition.build(\"SELECT * FROM message\");\r\n\t\t\r\n\t\t//第一个参数为条件类型;第二个参数为表字段;第三参数为对应的条件值\r\n\t\tcondition.addItem(Condition.ABSMATCH, \"message_id\", \"CONDITION_1\");\r\n\t\tMessageJPA msg = session.get(MessageJPA.class, condition);\r\n\t\tAssert.assertNotNull(msg);\r\n\t\tAssert.assertEquals(message.getContent(), msg.getContent());\r\n\t\tsession.close();\r\n\t}\r\n\t@Test\r\n\tpublic void otherTest() {\r\n\t\tCondition condition = Condition.build(MessageJPA.class)\r\n\t\t\t\t.addItem(Condition.LIKEMATCH, \"message_id\", \"CONDITION%\")\r\n\t\t\t\t.addItem(Condition.ORDER, \"message_id\", Condition.Order.DESC);//排序\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tList<MessageJPA> list = session.list(MessageJPA.class, condition);\r\n\t\tAssert.assertTrue(list.size() == 2);\r\n\t\tAssert.assertEquals(message2.getMessageId(), list.get(0).getMessageId());\r\n\t\tsession.close();\r\n\t}\r\n\t@AfterClass\r\n\tpublic static void tearDown() {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tsession.delete(message);\r\n\t\tsession.delete(message2);\r\n\t\tsession.close();\r\n\t}\r\n}\r\n```\r\n###### **智能QueryFilter查询**\r\n目前实现的filter有 \r\n\r\n> Filters.eq, Filters.neq\r\n> Filters.include, Filters.startWith, Filters.endWith\r\n> Filters.and, Filters.or, Filters.group\r\n\r\n```java\r\nSession session =  SessionFactory.getSession();\r\n// 获取Query对象\r\nQuery<MessageJPA> query = session.createQuery(MessageJPA.class);\r\n// 定义具体的QueryFilter\r\nQueryFilterGroup group = Filters.group();\r\ngroup.push(Filters.eq(\"messageId\", \"4000\"));\r\ngroup.push(Filters.or());\r\nQueryFilterGroup embedGrp = Filters.group();\r\nembedGrp.push(Filters.eq(\"messageId\", \"2000\"));\r\nembedGrp.push(Filters.eq(\"locale\", \"zh_CN\"));\r\ngroup.push(embedGrp);\r\n// 最终SQL(MYSQL):\r\n// select * from `message` where  ( `message_id` = '4000'  or  ( `message_id` = '2000'  and message_locale = 'zh_CN')  ) \r\n// 添加到Query对象\r\nquery.addFilter(group);\r\nList<MessageJPA> list = query.execute();\r\nsession.close();\r\n```\r\n##### **简单事务**\r\n\r\n - 开启事务 `session.beginTransaction();` 另外\r\n   `session.beginTransaction(TransactionLevel.TRANSACTION_READ_UNCOMMITTED)`\r\n   设置事务级别\r\n - 关闭事务 `session.endTransaction();` 另外 `session.close();`\r\n   也会默认关闭事务,如果开启的话.\r\n\r\n例子:\r\n```java\r\npublic class TransactionTest {\r\n\tprivate static MessageJPA message = new MessageJPA();\r\n\t@BeforeClass\r\n\tpublic static void setUp() {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tmessage.setMessageId(\"TRANSACTION\");\r\n\t\tmessage.setLocale(Locale.US.toString());\r\n\t\tmessage.setContent(\"Transaction test\");\r\n\t\tsession.save(message);\r\n\t\tsession.close();\r\n\t}\r\n\t@Test\r\n\tpublic void beginTransactionTest() throws TransactionException {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tsession.beginTransaction();\r\n\t\tmessage.setContent(\"Transaction test rollback\");\r\n\t\tsession.update(message);\r\n\t\tint result = session.add(\"insert into message\");//错误语法,新增不成功\r\n\t\tif (result == 0) {\r\n\t\t\tsession.rollback();\r\n\t\t} else {\r\n\t\t\tsession.commit();\r\n\t\t}\r\n\t\tsession.endTransaction();\r\n        \r\n\t\tMessageJPA msg = session.load(MessageJPA.class, message.getMessageId());\r\n\t\tAssert.assertNotNull(msg);\r\n\t\tAssert.assertEquals(\"Transaction test\", msg.getContent());\r\n\t\tsession.close();\r\n\t}\r\n\t@AfterClass\r\n\tpublic static void tearDown() {\r\n\t\tSession session = SessionFactory.getSession();\r\n\t\tsession.delete(message);\r\n\t\tsession.close();\r\n\t}\r\n}\r\n```\r\n\r\n##### **连接池**\r\n目前支持简单的连接池实现 `openthinks.libs.sql.dao.pool.impl.SimpleConnectionPool`;\r\n可以自行扩展 `openthinks.libs.sql.dao.pool.ConnectionPool`接口,并替换默认的实现:\r\n```java\r\nMyConnectionPool connPool = new MyConnectionPool();// your implemented ConnectionPool\r\nConnectionPoolManager.setSingletonPoolInstance(connPool);// make it replace the default pool\r\n```\r\n当然使用连接池前,必须配置,在配置文件 dbconfig.properties 中, 加入:\r\n```\r\nUSEPOOL=true\r\n#可选,不配的话默认无限制\r\nMAX_ACTIVE=100\r\n#可选,不配的话默认无限制\r\nMAX_IDLE=10\r\n```\r\n对于扩展的ConnectionPool, 除了如上所述使用Code替换默认实现, 亦可以在配置文件中指明实现类名称\r\n```\r\nUSEPOOL=true\r\nPOOL_CLASS=openthinks.libs.sql.MyConnectionPool\r\n```\r\n需要注意事项是构造函数的定义:\r\n\r\n 1. MyConnectionPool(Configuration) 和 MyConnectionPool() 至少需要定义一个\r\n 2. MyConnectionPool() 需要自行获取配置类,以确保获取到数据库连接\r\n 3. 优先使用 MyConnectionPool(Configuration) 构造函数\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}